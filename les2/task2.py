"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def chetnechet(a):
    chet = 0
    nechet = 0
    x = 10
    if len(a) == 1:
        return print(chet), chetnechet(a)

    return chetnechet(int(a)%10)
#(int(a)//x)%2 == 0
#chetnechet(123)

chet = 0
nechet = 0

a = 123
b = a%10 #3
if b%2 == 0:
    chet += 1
else:
    nechet += 1
a = a//10 #12
b = a%10 #2
if b%2 == 0:
    chet += 1
else:
    nechet += 1
a = a//10 #1
b = a%10 #1
if b%2 == 0:
    chet += 1
else:
    nechet += 1


def chetnechet(a):
    nechet = a % 10 % 2

    if len(str(a)) == 1:
        return print(a,nechet)
    return chetnechet(a // 10),


chetnechet(123)